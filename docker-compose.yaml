version: '3.3'
services:

  frontend:
    container_name: yeti-frontend
    build:
      dockerfile: ./docker-frontend/Dockerfile
    image: yetiplatform/yeti-frontend:latest
    ports:
      - 8081:80
    volumes:
      - ./docker-frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
    #user: "app"  # 使用 app 用户

  api:
    container_name: yeti-api
    image: yetiplatform/yeti:latest
    build:
      dockerfile: ./docker-yeti/Dockerfile
    env_file:
      - ${YETI_DOCKER_ENVFILE}
    entrypoint:
      - /docker-entrypoint.sh
    command: ["webserver"]
    ports:
      - 8000:8000
    depends_on:
      - redis
      - arangodb
      - mysql
    volumes:
      - /data/app/yeti-data/docker-yeti-exports:/opt/yeti/exports
      - /data/app/yeti-data/yeti_log/yeti_audit.log:/var/log/yeti_audit.log
      - /data/app/yeti-data/yeti_log/yeti_system.log:/var/log/yeti_system.log
    user: "app"  # 使用 app 用户
      

  tasks:
    container_name: yeti-tasks
    image: yetiplatform/yeti:latest
    build:
      dockerfile: ./docker-yeti/Dockerfile
    env_file:
      - ${YETI_DOCKER_ENVFILE}
    command: ['tasks']
    depends_on:
      - redis
      - arangodb
      - api
    user: "app"  # 使用 app 用户

  redis:
    container_name: yeti-redis
    image: redis:latest
    user: "redis"  # 使用 redis 用户

  arangodb:
    container_name: yeti-arangodb
    image: arangodb:3.11.8
    environment:
      - ARANGO_ROOT_PASSWORD=${YETI_ARANGODB_PASSWORD}
    volumes:
      - /data/app/yeti-data:/var/lib/arangodb3

  mysql:
    container_name: yeti-mysql
    image: mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - /data/app/yeti-data/mysql-data:/var/lib/mysql
    user: "mysql"  # 使用 mysql 用户
    
networks:
  default:
    name: yeti_network
    ipam:
      driver: default
      config:
        - subnet: 172.23.0.0/16

